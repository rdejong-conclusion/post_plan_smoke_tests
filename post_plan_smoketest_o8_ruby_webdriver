require "json"
require 'date'
require "selenium-webdriver"
gem "test-unit"
require "test/unit"

class PostPlanSmoketestO8RubyWebdriver < Test::Unit::TestCase

  def setup
    Selenium::WebDriver::Firefox.path = "/root/firefox/firefox"
    $target_host = ENV["target_host"]
    $target_user = ENV["target_user"]
    $target_pass = ENV["target_pass"]
    @wait = Selenium::WebDriver::Wait.new(:timeout => 600)
    @driver = Selenium::WebDriver.for(:firefox, :profile => "firefox-default")
    @base_url = "https://#{$target_host}:14051/HARM/controller"
    @accept_next_alert = true
    @driver.manage.timeouts.implicit_wait = 600
    @verification_errors = []
  end
  
  def teardown
    @driver.quit
    assert_equal [], @verification_errors
  end
  
  def test_post_plan_smoketest_o8_ruby_webdriver
    @driver.get(@base_url)
    puts @driver.title
    puts "Logging in"
    @driver.find_element(:name, "username").clear
    @driver.find_element(:name, "username").send_keys $target_user
    @driver.find_element(:name, "userpassword").clear
    @driver.find_element(:name, "userpassword").send_keys $target_pass
    @driver.find_element(:css, "input[type=\"submit\"]").click
    @driver.find_element(:link, "Processen").click
    puts "Generating plan"
    @driver.find_element(:link, "Genereren planning").click
    # Define current dd-mm-YYYY for plan generation
    current_date = DateTime.now().strftime("%d-%m-%Y")
    @driver.find_element(:name, "startDate").send_keys "#{current_date}"
    @driver.find_element(:name, "endDate").send_keys "#{current_date}"
    @driver.find_element(:css, "input[type=\"submit\"]").click
    @driver.find_element(:link, "Voortgang processen").click
    # Wait until the generation has finished
    body = @driver.find_element(:tag_name => "body").text
    assert !60.times{ break if (body.include? "Opdracht verwerkt om actuele planning te genereren voor periode #{current_date} - #{current_date}");sleep 5}
    puts "Generation command recieved"
    assert !120.times{ break if (body.include? "Start genereren actuele planning voor #{current_date}");sleep 8}
    puts "Generation started"
    assert !120.times{ break if (@driver.find_element(:tag_name => "body").text.include? "Genereren actuele planning afgerond");sleep 8}
    puts "Generation finished"
  end
  
  def element_present?(how, what)
    @driver.find_element(how, what)
    true
  rescue Selenium::WebDriver::Error::NoSuchElementError
    false
  end
  
  def alert_present?()
    @driver.switch_to.alert
    true
  rescue Selenium::WebDriver::Error::NoAlertPresentError
    false
  end
  
  def verify(&blk)
    yield
  rescue Test::Unit::AssertionFailedError => ex
    @verification_errors << ex
  end
  
  def close_alert_and_get_its_text(how, what)
    alert = @driver.switch_to().alert()
    alert_text = alert.text
    if (@accept_next_alert) then
      alert.accept()
    else
      alert.dismiss()
    end
    alert_text
  ensure
    @accept_next_alert = true
  end
end
